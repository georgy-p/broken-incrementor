Перед вами обычный счетчик с базовой логикой увеличения/уменьшения значения.
Важно: все изменения выполняются асинхронно и используют фейковый api.
Задание возможно решить двумя способами, но в каждом из них необходимо выполнить два требования:

Требование 1: При нажатии на кнопки “уменьшить” и “увеличить” значение счетчика изменяется на единицу.
Требование 2: При вводе значения в инпут и нажатии кнопок под ним значение счетчика изменяется в зависимости от введённого значения.

## Вариант выполнения 1. Redux
Предыдущий разработчик так и не разобрался в redux-saga и Typescript. Итог - базовые требования к приложению не выполнены.
Минимальные требования: Оставить текущие библиотеки (разрешается перейти на redux-toolkit), починить приложение, реализовав описанную логику.

## Вариант выполнения 2. React-Query + Zustand
Вы уговорили тимлида переписать приложение используя react-query для асинхронных запросов и zustand для хранения состояния.
Покажите, на всю силу рефакторинга!
Минимальные требования: Вырезать redux, отрефакторить приложение, реализовав требуемую логику с помощью zustand и react-query.
 
## Дополнительные необязательные задачи (независимо от варианта выполнения)
1. Описать типы сущностей, используемых в приложении;
2. Найти уязвивые места (лишние ререндеры, потенциальные баги и всё что заметите) в приложении и поправить их;
3. Стилизовать приложение, улучшить пользовательский опыт (например, добавть лоадеры)
4. Заказчик просит реализовать новый функционал: кнопки не должны нажиматься, пока идёт запрос.
5. Продакт менеджер сказал, что сейчас круто, когда запросы можно отменять, пока они не выполнились. Сможете реализовать?

